// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieAnalytics.Data;

#nullable disable

namespace MovieAnalytics.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250119024003_InitialMigrationSqlite")]
    partial class InitialMigrationSqlite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("MovieAnalytics.Models.Domain.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.Movie", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("NUMERIC");

                    b.Property<string>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("GrossUsCanada")
                        .HasColumnType("NUMERIC");

                    b.Property<decimal?>("GrossWorldWide")
                        .HasColumnType("NUMERIC");

                    b.Property<string>("MovieLink")
                        .HasColumnType("TEXT");

                    b.Property<string>("MpaRating")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Nominations")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("OpeningWeekendGross")
                        .HasColumnType("NUMERIC");

                    b.Property<int?>("Oscars")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("NUMERIC");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Votes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Wins")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.MovieCountry", b =>
                {
                    b.Property<string>("MovieId")
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MovieId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("MovieCountries");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.MovieDirector", b =>
                {
                    b.Property<string>("MovieId")
                        .HasColumnType("TEXT");

                    b.Property<int>("DirectorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MovieId", "DirectorId");

                    b.HasIndex("DirectorId");

                    b.ToTable("MovieDirectors");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.MovieGenre", b =>
                {
                    b.Property<string>("MovieId")
                        .HasColumnType("TEXT");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.MovieLanguage", b =>
                {
                    b.Property<string>("MovieId")
                        .HasColumnType("TEXT");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MovieId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("MovieLanguages");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.MovieProductionCompany", b =>
                {
                    b.Property<string>("MovieId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductionCompanyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MovieId", "ProductionCompanyId");

                    b.HasIndex("ProductionCompanyId");

                    b.ToTable("MovieProductionCompanies");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.MovieStar", b =>
                {
                    b.Property<string>("MovieId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StarId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MovieId", "StarId");

                    b.HasIndex("StarId");

                    b.ToTable("MovieStars");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.MovieWriter", b =>
                {
                    b.Property<string>("MovieId")
                        .HasColumnType("TEXT");

                    b.Property<int>("WriterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MovieId", "WriterId");

                    b.HasIndex("WriterId");

                    b.ToTable("MovieWriters");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.ProductionCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductionCompanies");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.Star", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Stars");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.Writer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Writers");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.MovieCountry", b =>
                {
                    b.HasOne("MovieAnalytics.Models.Domain.Country", "Country")
                        .WithMany("MovieCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAnalytics.Models.Domain.Movie", "Movie")
                        .WithMany("MovieCountries")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.MovieDirector", b =>
                {
                    b.HasOne("MovieAnalytics.Models.Domain.Director", "Director")
                        .WithMany("MovieDirectors")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAnalytics.Models.Domain.Movie", "Movie")
                        .WithMany("MovieDirectors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.MovieGenre", b =>
                {
                    b.HasOne("MovieAnalytics.Models.Domain.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAnalytics.Models.Domain.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.MovieLanguage", b =>
                {
                    b.HasOne("MovieAnalytics.Models.Domain.Language", "Language")
                        .WithMany("MovieLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAnalytics.Models.Domain.Movie", "Movie")
                        .WithMany("MovieLanguages")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.MovieProductionCompany", b =>
                {
                    b.HasOne("MovieAnalytics.Models.Domain.Movie", "Movie")
                        .WithMany("MovieProductionCompanies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAnalytics.Models.Domain.ProductionCompany", "ProductionCompany")
                        .WithMany("MovieProductionCompanies")
                        .HasForeignKey("ProductionCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("ProductionCompany");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.MovieStar", b =>
                {
                    b.HasOne("MovieAnalytics.Models.Domain.Movie", "Movie")
                        .WithMany("MovieStars")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAnalytics.Models.Domain.Star", "Star")
                        .WithMany("MovieStars")
                        .HasForeignKey("StarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Star");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.MovieWriter", b =>
                {
                    b.HasOne("MovieAnalytics.Models.Domain.Movie", "Movie")
                        .WithMany("MovieWriters")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAnalytics.Models.Domain.Writer", "Writer")
                        .WithMany("MovieWriters")
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.Country", b =>
                {
                    b.Navigation("MovieCountries");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.Director", b =>
                {
                    b.Navigation("MovieDirectors");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.Language", b =>
                {
                    b.Navigation("MovieLanguages");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.Movie", b =>
                {
                    b.Navigation("MovieCountries");

                    b.Navigation("MovieDirectors");

                    b.Navigation("MovieGenres");

                    b.Navigation("MovieLanguages");

                    b.Navigation("MovieProductionCompanies");

                    b.Navigation("MovieStars");

                    b.Navigation("MovieWriters");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.ProductionCompany", b =>
                {
                    b.Navigation("MovieProductionCompanies");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.Star", b =>
                {
                    b.Navigation("MovieStars");
                });

            modelBuilder.Entity("MovieAnalytics.Models.Domain.Writer", b =>
                {
                    b.Navigation("MovieWriters");
                });
#pragma warning restore 612, 618
        }
    }
}
